name: analyze-and-update-sheets

on:
  workflow_dispatch:
  schedule:
    - cron: "30 23 * * *"  # KST 08:30

permissions:
  contents: read
  actions: read

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 150
    env:
      CI: "1"
      PYTHONUNBUFFERED: "1"
      TZ: Asia/Seoul
      SHEET_ID: ${{ secrets.SHEET_ID }}
      SA_JSON: ${{ secrets.GDRIVE_SA_JSON }}
      SOURCE_REPO_PAT: ${{ secrets.SOURCE_REPO_PAT }}
      SRC_REPO: ckh3455/file-automation
      SRC_WORKFLOW: molit.yml
      SRC_ARTIFACT: molit-xlsx

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 외부 레포 최신 성공 run에서 artifact 다운로드 (안정된 공식 액션)
      - name: Download artifact (latest success from ${{ env.SRC_REPO }})
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.SOURCE_REPO_PAT }}
          repo: ${{ env.SRC_REPO }}
          workflow: ${{ env.SRC_WORKFLOW }}
          workflow_conclusion: success
          branch: main
          name: ${{ env.SRC_ARTIFACT }}
          path: artifacts

      # 신선도 검사(<=12h 또는 파일명 날짜가 오늘) - Bash만 사용
      - name: Freshness check (<=12h or filename date == today KST)
        id: fresh
        shell: bash
        run: |
          set -euo pipefail
          echo "is_fresh=false" >> "$GITHUB_OUTPUT"

          echo "=== Freshness check start ==="
          if ! find artifacts -type f -name "*.xlsx" | grep -q . ; then
            echo "No .xlsx files under artifacts/"
            exit 0
          fi

          # 최신 파일(mtime) 가져오기
          latest_line="$(find artifacts -type f -name '*.xlsx' -printf '%T@ %p\n' | sort -n | tail -1)"
          if [ -z "${latest_line}" ]; then
            echo "No XLSX files found after listing."
            exit 0
          fi

          latest_ts="$(echo "${latest_line}" | awk '{print $1}')"
          latest_path="$(echo "${latest_line}" | cut -d' ' -f2-)"
          latest_file="$(basename -- "${latest_path}")"
          now_ts="$(date +%s)"
          latest_ts_int="$(printf '%.0f\n' "${latest_ts}")"
          age_sec="$(( now_ts - latest_ts_int ))"
          age_h="$(awk -v s="${age_sec}" 'BEGIN{printf "%.2f", s/3600.0}')"

          echo "Latest file: ${latest_file}"
          echo "Age hours: ${age_h}"

          # mtime 기준 신선도 (<= 12h)
          is_fresh_by_mtime="false"
          if [ "${age_sec}" -le $((12*3600)) ]; then
            is_fresh_by_mtime="true"
          fi

          # 파일명에서 날짜 힌트 추출 (YYYYMMDD or YYYY-MM-DD or YYMMDD)
          today_kst="$(TZ=Asia/Seoul date +%Y%m%d)"

          # 1) YYYYMMDD 또는 YYYY-MM-DD
          name_digits="$(echo "${latest_file}" | grep -Eo '20[0-9]{2}[-_/]?[01]?[0-9][-_/]?[0-3]?[0-9]' || true)"
          is_fresh_by_name="false"
          if [ -n "${name_digits}" ]; then
            # 숫자만 추출
            y="$(echo "${name_digits}" | sed -E 's/[^0-9]//g' | tail -1)"
            if [ ${#y} -eq 8 ]; then
              ymd="${y}"
              # 비교
              if [ "${ymd}" = "${today_kst}" ]; then
                is_fresh_by_name="true"
              fi
            fi
          fi

          # 2) YYMMDD 패턴 보조 (예: 251006)
          if [ "${is_fresh_by_name}" != "true" ]; then
            ymd2="$(echo "${latest_file}" | grep -Eo '(^|[^0-9])[0-9]{6}([^0-9]|$)' | grep -Eo '[0-9]{6}' | tail -1 || true)"
            if [ -n "${ymd2}" ]; then
              yy="${ymd2:0:2}"; mm="${ymd2:2:2}"; dd="${ymd2:4:2}"
              # 2000년대 가정
              y_full=$((2000 + 10#${yy}))
              ymd="${y_full}$(printf '%02d%02d' "${mm}" "${dd}")"
              if [ "${ymd}" = "${today_kst}" ]; then
                is_fresh_by_name="true"
              fi
            fi
          fi

          echo "fresh_by_mtime=${is_fresh_by_mtime}, fresh_by_name=${is_fresh_by_name}"

          if [ "${is_fresh_by_mtime}" = "true" ] || [ "${is_fresh_by_name}" = "true" ]; then
            echo "is_fresh=true" >> "$GITHUB_OUTPUT"
          else
            echo "Artifacts are stale → skip analysis this run."
          fi

      - name: List downloaded files
        run: |
          echo "=== downloaded files ==="
          find artifacts -type f -printf "%TY-%Tm-%Td %TT %p\n" | sort || true

      - name: Run analysis & update
        if: ${{ steps.fresh.outputs.is_fresh == 'true' }}
        env:
          ARTIFACTS_DIR: artifacts
        run: |
          python scripts/analyze_and_update.py \
            --artifacts-dir artifacts \
            --sheet-id "$SHEET_ID"

      - name: Skip note (stale artifacts)
        if: ${{ steps.fresh.outputs.is_fresh != 'true' }}
        run: |
          echo "::notice::Artifacts are not fresh (older than 12h or not today's date). Skipping this run."

      - name: Preview analyze_report (always)
        if: always()
        run: |
          echo "== analyze_report tree =="; ls -alR analyze_report || true
          echo "---- latest.log (head) ----"; sed -n '1,220p' analyze_report/latest.log || true
          echo "---- run logs list ----"; ls -al analyze_report/run-*.log 2>/dev/null || true
          echo "---- where_written.txt ----"; cat analyze_report/where_written.txt 2>/dev/null || true

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: analyze-report
          path: analyze_report/**
          retention-days: 14
          compression-level: 6
