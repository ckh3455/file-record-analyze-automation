# .github/workflows/analyze-and-update-sheets.yml
name: analyze-and-update-sheets

on:
  workflow_dispatch:
  schedule:
    - cron: "30 23 * * *"  # KST 08:30

permissions:
  contents: read
  actions: read

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 150
    env:
      CI: "1"
      PYTHONUNBUFFERED: "1"
      TZ: Asia/Seoul

      SHEET_ID: ${{ secrets.SHEET_ID }}
      SA_JSON:  ${{ secrets.GDRIVE_SA_JSON }}
      SOURCE_REPO_PAT: ${{ secrets.SOURCE_REPO_PAT }}

      SRC_REPO: ckh3455/file-automation
      SRC_WORKFLOW: molit.yml
      SRC_ARTIFACT: molit-xlsx

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # üîÅ 15Î∂Ñ Í∞ÑÍ≤© Ïû¨ÏãúÎèÑ + BashÎßå ÏÇ¨Ïö©(ÌååÏù¥Ïç¨ ÏóÜÏùå)
      - name: Download artifacts with freshness guard (retry every 15 min)
        id: fetch
        shell: bash
        env:
          MAX_TRIES: "6"    # Ï≤òÏùå + 5Ìöå Ïû¨ÏãúÎèÑ
          RETRY_MIN: "15"   # 15Î∂Ñ Í∞ÑÍ≤©
        run: |
          set -euo pipefail
          echo "${SOURCE_REPO_PAT}" | gh auth login --with-token

          rm -rf artifacts
          mkdir -p artifacts

          try=1
          while :; do
            echo "::group::[try ${try}] find latest SUCCESS run"
            RUN_JSON="$(gh run list -R "${SRC_REPO}" \
              --workflow "${SRC_WORKFLOW}" \
              --status success \
              --json databaseId,displayTitle,updatedAt \
              --limit 1)"
            echo "RUN_JSON=${RUN_JSON}"
            RUN_ID="$(echo "${RUN_JSON}" | jq -r '.[0].databaseId // empty')"
            RUN_UPDATED="$(echo "${RUN_JSON}" | jq -r '.[0].updatedAt // empty')"
            RUN_TITLE="$(echo "${RUN_JSON}" | jq -r '.[0].displayTitle // empty')"
            echo "RUN_ID=${RUN_ID}"
            echo "RUN_UPDATED(UTC)=${RUN_UPDATED}"
            echo "RUN_TITLE=${RUN_TITLE}"
            echo "::endgroup::"

            rc=0
            if [ -z "${RUN_ID}" ]; then
              echo "::warning::No successful run found yet."
              rc=66
            else
              echo "::group::Download artifact (exact name: ${SRC_ARTIFACT})"
              rm -rf artifacts/*
              if ! gh run download "${RUN_ID}" -R "${SRC_REPO}" -n "${SRC_ARTIFACT}" -D artifacts; then
                echo "::warning::Artifact '${SRC_ARTIFACT}' not found on run ${RUN_ID}."
                rc=66
              fi
              echo "::endgroup::"
            fi

            # üîç BashÎ°úÎßå Ïã†ÏÑ†ÎèÑ(<=12h, KST) ÌôïÏù∏
            if [ ${rc} -eq 0 ]; then
              echo "::group::Freshness check (<=12h, KST, bash-only)"
              # KST now
              KST_NOW_SEC=$(date -u +"%s")
              KST_NOW_SEC=$((KST_NOW_SEC + 9*3600))
              echo "KST now (epoch): ${KST_NOW_SEC}"

              mapfile -t XLSX < <(find artifacts -type f -name '*.xlsx' -printf '%T@ %p\n' | sort -n)
              echo "xlsx files found: ${#XLSX[@]}"

              if [ "${#XLSX[@]}" -eq 0 ]; then
                echo "No .xlsx ‚Üí treat as stale"
                rc=66
              else
                # ÏµúÍ∑º ÌååÏùº Î°úÍ∑∏(ÏµúÎåÄ 15Í∞ú)
                CNT=${#XLSX[@]}
                START=$(( CNT > 15 ? CNT-15 : 0 ))
                for ((i=START; i<CNT; i++)); do
                  LINE="${XLSX[$i]}"
                  TS_FLOAT="${LINE%% *}"
                  FILE="${LINE#* }"
                  TS_INT="${TS_FLOAT%.*}"
                  AGE=$(( KST_NOW_SEC - TS_INT ))
                  printf -- "- %s | modified(KST epoch)=%s | age_h=%.2f\n" "$FILE" "$TS_INT" "$(echo "$AGE/3600" | bc -l)"
                done

                # ÏµúÏã† ÌååÏùº
                LAST_LINE="${XLSX[-1]}"
                LAST_TS_FLOAT="${LAST_LINE%% *}"
                LAST_FILE="${LAST_LINE#* }"
                LAST_TS_INT="${LAST_TS_FLOAT%.*}"
                LAST_AGE=$(( KST_NOW_SEC - LAST_TS_INT ))
                LAST_AGE_H=$(echo "$LAST_AGE/3600" | bc -l)

                echo "latest: ${LAST_FILE}"
                echo "latest age hours: ${LAST_AGE_H}"

                # ÌååÏùºÎ™ÖÏóêÏÑú ÎÇ†Ïßú ÌûåÌä∏(ÏûàÏúºÎ©¥ Î°úÍ∑∏Îßå)
                if grep -Eo '20[0-9]{2}[-_/ ]?[0-9]{1,2}[-_/ ]?[0-9]{1,2}' <<<"$(basename "$LAST_FILE")" >/dev/null 2>&1; then
                  HINT="$(grep -Eo '20[0-9]{2}[-_/ ]?[0-9]{1,2}[-_/ ]?[0-9]{1,2}' <<<"$(basename "$LAST_FILE")" | tail -1)"
                  echo "filename date hint: ${HINT}"
                fi

                # 12ÏãúÍ∞Ñ(43200Ï¥à) Í∏∞Ï§Ä
                if [ "$LAST_AGE" -gt 43200 ]; then
                  echo "RESULT: STALE or NOT TODAY ‚Üí retry later"
                  rc=66
                else
                  echo "RESULT: FRESH ‚úì"
                  rc=0
                fi
              fi
              echo "::endgroup::"
            fi

            if [ ${rc} -eq 0 ]; then
              echo "Fresh artifacts detected."
              break
            fi

            if [ ${try} -ge ${MAX_TRIES} ]; then
              echo "::error::No fresh artifacts after ${try} tries."
              exit 1
            fi

            echo "::notice::Retry in ${RETRY_MIN} minutes (next try: $((try+1))/${MAX_TRIES})."
            sleep "$((RETRY_MIN*60))"
            try=$((try+1))
          done

          echo "OK" > .fresh_ok

      - name: List downloaded files
        run: |
          find artifacts -type f -printf "%TY-%Tm-%Td %TT %p\n" | sort || true

      - name: Run analysis & update
        if: ${{ hashFiles('.fresh_ok') != '' }}
        env:
          ARTIFACTS_DIR: artifacts
        run: |
          python scripts/analyze_and_update.py \
            --artifacts-dir artifacts \
            --sheet-id "$SHEET_ID"

      - name: Preview analyze_report (always)
        if: always()
        run: |
          echo "== analyze_report tree =="; ls -alR analyze_report || true
          echo "---- latest.log (head) ----"; sed -n '1,220p' analyze_report/latest.log || true
          echo "---- run logs list ----"; ls -al analyze_report/run-*.log 2>/dev/null || true
          echo "---- where_written.txt ----"; cat analyze_report/where_written.txt 2>/dev/null || true

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: analyze-report
          path: analyze_report/**
          retention-days: 14
          compression-level: 6
