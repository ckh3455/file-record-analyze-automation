name: analyze-and-update-sheets

on:
  workflow_dispatch:
  schedule:
    - cron: "30 23 * * *"  # KST 08:30

permissions:
  contents: read
  actions: read

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 150
    env:
      CI: "1"
      PYTHONUNBUFFERED: "1"
      TZ: Asia/Seoul
      SHEET_ID: ${{ secrets.SHEET_ID }}
      SA_JSON: ${{ secrets.GDRIVE_SA_JSON }}
      SOURCE_REPO_PAT: ${{ secrets.SOURCE_REPO_PAT }}

      # 업스트림 정보
      SRC_REPO: ckh3455/file-automation
      SRC_WORKFLOW: molit.yml

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # === 최신 성공 run의 모든 아티팩트 다운로드 ===
      - name: Download ALL artifacts (latest success)
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.SOURCE_REPO_PAT }}
          repo: ${{ env.SRC_REPO }}
          workflow: ${{ env.SRC_WORKFLOW }}
          workflow_conclusion: success
          branch: main
          # name 은 지정하지 않습니다(전부 받기)
          path: artifacts

      - name: Show downloaded tree (debug)
        run: |
          echo "== downloaded artifacts tree =="
          find artifacts -maxdepth 3 -type f -print || true

      # === 파일명에서 오늘(KST)의 YYMMDD만 선별 ===
      - name: Select only today's KST XLSX (전국/서울시 *_YYMMDD*.xlsx)
        id: select
        shell: bash
        run: |
          set -euo pipefail

          # 오늘 KST → YYMMDD
          KST_YMD=$(date -u -d "+9 hours" +'%y%m%d')
          echo "KST today (YYMMDD): ${KST_YMD}"

          mkdir -p artifacts_selected
          found=0

          # 패턴: '전국 *.xlsx' 또는 '서울시 *.xlsx' 이면서 파일명에 _YYMMDD 포함
          while IFS= read -r -d '' f; do
            bn="$(basename "$f")"
            if [[ "$bn" =~ ^(전국|서울시)[[:space:]].*_${KST_YMD}.*\.xlsx$ ]]; then
              cp -f "$f" artifacts_selected/
              echo "SELECTED: $bn"
              found=1
            fi
          done < <(find artifacts -type f -name '*.xlsx' -print0)

          if [[ $found -eq 0 ]]; then
            echo "::error::No XLSX matching today's (${KST_YMD}) pattern found."
            echo "---- candidate list with date hints ----"
            # 파일명에서 YYMMDD 감지해 보기 좋은 로그 제공
            python - <<'PY'
import pathlib, re
root = pathlib.Path("artifacts")
files = sorted(root.rglob("*.xlsx"))
pat = re.compile(r"(\d{6})")
for p in files:
    m = pat.findall(p.name)
    print(f"- {p.name} | hints={m}")
PY
            exit 66
          fi

          echo "selected_dir=artifacts_selected" >> "$GITHUB_OUTPUT"

      - name: Run analysis & update
        env:
          ARTIFACTS_DIR: ${{ steps.select.outputs.selected_dir }}
          SHEET_ID: ${{ env.SHEET_ID }}
        run: |
          python scripts/analyze_and_update.py \
            --artifacts-dir "${ARTIFACTS_DIR}" \
            --sheet-id "$SHEET_ID"

      - name: Preview analyze_report (always)
        if: always()
        run: |
          echo "== analyze_report tree =="; ls -alR analyze_report || true
          echo "---- latest.log (head) ----"; sed -n '1,220p' analyze_report/latest.log || true
          echo "---- run logs list ----"; ls -al analyze_report/run-*.log 2>/dev/null || true
          echo "---- where_written.txt ----"; cat analyze_report/where_written.txt 2>/dev/null || true

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: analyze-report
          path: analyze_report/**
          retention-days: 14
          compression-level: 6
